name: Deploy agent Os Instance

on:
  push:
    tags:
      - '*'
env:
  TFSTATE_S3_PATH: ${{ secrets.TFSTATE_S3_PATH }}  

permissions:
  contents: write

jobs:
  build-binaries:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'

      - name: Build Agent Binaries - Windows amd64
        run: |
          cd cmd/agent
          GOOS=windows GOARCH=amd64 go build -o agent-windows-amd64.exe main.go
          echo "Built agent binary:"
          ls -la agent-windows-amd64.exe
      
      - name: Build Agent Binaries - Linux amd64 and arm64
        run: |
          cd cmd/agent
          GOOS=linux GOARCH=arm64 go build -o agent-linux-arm64 main.go
          GOOS=linux GOARCH=amd64 go build -o agent-linux-amd64 main.go
      
      - name: Build Agent Binaries - macOS amd64 and arm64
        run: |
          cd cmd/agent
          GOOS=darwin GOARCH=arm64 go build -o agent-macos-arm64 main.go
          GOOS=darwin GOARCH=amd64 go build -o agent-macos-amd64 main.go

      - name: Build Manager Binaries - Windows amd64
        run: |
          cd cmd/manager
          GOOS=windows GOARCH=amd64 go build -o manager-windows-amd64.exe main.go
          echo "Built manager binary:"
          ls -la manager-windows-amd64.exe
      
      - name: Build Manager Binaries - Linux amd64 and arm64
        run: |
          cd cmd/manager
          GOOS=linux GOARCH=arm64 go build -o manager-linux-arm64 main.go
          GOOS=linux GOARCH=amd64 go build -o manager-linux-amd64 main.go

      - name: Build Manager Binaries - macOS amd64 and arm64
        run: |
          cd cmd/manager
          GOOS=darwin GOARCH=arm64 go build -o manager-macos-arm64 main.go
          GOOS=darwin GOARCH=amd64 go build -o manager-macos-amd64 main.go

      - name: Build Updater Binaries - Windows amd64
        run: |
          cd cmd/updater
          GOOS=windows GOARCH=amd64 go build -o updater-windows-amd64.exe main.go

      - name: Build Updater Binaries - Linux amd64 and arm64
        run: |
          cd cmd/updater
          GOOS=linux GOARCH=arm64 go build -o updater-linux-arm64 main.go
          GOOS=linux GOARCH=amd64 go build -o updater-linux-amd64 main.go

      - name: Build Updater Binaries - macOS amd64 and arm64
        run: |
          cd cmd/updater
          GOOS=darwin GOARCH=arm64 go build -o updater-macos-arm64 main.go
          GOOS=darwin GOARCH=amd64 go build -o updater-macos-amd64 main.go

      - name: List built binaries
        run: |
          echo "=== Agent binaries ==="
          ls -la cmd/agent/agent-*
          echo "=== Manager binaries ==="
          ls -la cmd/manager/manager-*
          echo "=== Updater binaries ==="
          ls -la cmd/updater/updater-*

      - name: Upload Binaries
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: |
            cmd/agent/agent-*
            cmd/manager/manager-*
            cmd/updater/updater-*

  build-windows-installers:
    runs-on: windows-latest
    needs: build-binaries
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'

      - name: Download Binaries
        uses: actions/download-artifact@v4
        with:
          name: binaries
          path: binaries/

      - name: Setup WiX Toolset
        run: |
          # Install WiX Toolset via Chocolatey
          choco install wixtoolset
          # Add WiX to PATH (if needed)
          echo "C:\Program Files (x86)\WiX Toolset v3.11\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Prepare Windows Binaries
        run: |
          # Debug: List what was downloaded
          echo "=== Debug: Contents of binaries directory ==="
          Get-ChildItem -Recurse binaries/
          
          # Check if installers directory exists
          if (!(Test-Path "installers")) {
            echo "ERROR: installers directory not found!"
            exit 1
          }
          
          # Enter installers directory
          cd installers
          
          # Copy the manager and agent binaries from the correct paths
          # Based on the artifact structure, they are in binaries/manager/ and binaries/agent/
          $managerPath = "..\binaries\manager\manager-windows-amd64.exe"
          $agentPath = "..\binaries\agent\agent-windows-amd64.exe"
          
          # Check if manager binary exists
          if (Test-Path $managerPath) {
            copy $managerPath manager.exe
            echo "Copied manager binary from $managerPath"
          } else {
            echo "ERROR: Manager binary not found at $managerPath"
            echo "=== Available files in binaries/manager/ ==="
            Get-ChildItem "..\binaries\manager\" -ErrorAction SilentlyContinue
            exit 1
          }
          
          # Check if agent binary exists
          if (Test-Path $agentPath) {
            copy $agentPath agent.exe  
            echo "Copied agent binary from $agentPath"
          } else {
            echo "ERROR: Agent binary not found at $agentPath"
            echo "=== Available files in binaries/agent/ ==="
            Get-ChildItem "..\binaries\agent\" -ErrorAction SilentlyContinue
            exit 1
          }
          
          # Build config executables needed by WiX
          echo "=== Building config executables ==="
          
          # Build manager config executable
          $env:GOOS = "windows"
          $env:GOARCH = "amd64"
          go build -o config_manager.exe manager/install_manager_windows.go
          echo "Built config_manager.exe"
          
          # Build agent config executable  
          $env:SCM = "agent"
          go build -o config_agent.exe agent/install_agent_windows.go
          echo "Built config_agent.exe"
          
          # List files to verify
          echo "=== Files in installers directory ==="
          dir
          
      - name: Update XML installers with version and generate UUIDs
        run : |
          # Generate unique UUIDs for each installer
          $agentUpgradeCode = [System.Guid]::NewGuid().ToString().ToUpper()
          $managerUpgradeCode = [System.Guid]::NewGuid().ToString().ToUpper()
          
          echo "Generated Agent UpgradeCode: $agentUpgradeCode"
          echo "Generated Manager UpgradeCode: $managerUpgradeCode"
          
          # Update agent XML with version and UUID
          (Get-Content installers\install_agent_windows.xml) -replace 'AGENT_VERSION', '${{ github.ref_name }}' | Set-Content installers\install_agent_windows.xml
          (Get-Content installers\install_agent_windows.xml) -replace 'UPGRADE_CODE', $agentUpgradeCode | Set-Content installers\install_agent_windows.xml
          
          # Update manager XML with version and UUID  
          (Get-Content installers\install_manager_windows.xml) -replace 'MANAGER_VERSION', '${{ github.ref_name }}' | Set-Content installers\install_manager_windows.xml
          (Get-Content installers\install_manager_windows.xml) -replace 'UPGRADE_CODE', $managerUpgradeCode | Set-Content installers\install_manager_windows.xml
 
      - name: Build Windows Installers
        run: |
          # Enter installers directory
          cd installers
          
          # Build Manager MSI
          # Use candle.exe to compile manager XML to wixobj
          candle.exe install_manager_windows.xml -o install_manager_windows.wixobj
          # Use light.exe with WixUIExtension to create MSI
          light.exe -ext WixUIExtension install_manager_windows.wixobj -o install_manager_windows.msi
          
          # Build Agent MSI  
          # Use candle.exe to compile agent XML to wixobj
          candle.exe install_agent_windows.xml -o install_agent_windows.wixobj
          # Use light.exe with WixUIExtension to create MSI
          light.exe -ext WixUIExtension install_agent_windows.wixobj -o install_agent_windows.msi
          
          # List generated files
          dir *.msi

      - name: Upload Windows Installers
        uses: actions/upload-artifact@v4
        with:
          name: windows-installers
          path: |
            installers/*.msi

  organize-and-release:
    runs-on: ubuntu-latest
    needs: [build-binaries, build-windows-installers]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Binaries
        uses: actions/download-artifact@v4
        with:
          name: binaries
          path: binaries/

      - name: Download Windows Installers
        uses: actions/download-artifact@v4
        with:
          name: windows-installers
          path: windows-installers/

      - name: Organize Release Assets
        run: |
          # Create directories for organized release
          mkdir -p release/manager
          mkdir -p release/agent
          mkdir -p release/updater
          mkdir -p release/installer
          
          # Copy manager binaries with organized structure
          cp binaries/manager/manager-windows-amd64.exe release/manager/
          cp binaries/manager/manager-linux-amd64 release/manager/
          cp binaries/manager/manager-linux-arm64 release/manager/
          cp binaries/manager/manager-macos-amd64 release/manager/
          cp binaries/manager/manager-macos-arm64 release/manager/
          
          # Copy agent binaries with organized structure
          cp binaries/agent/agent-windows-amd64.exe release/agent/
          cp binaries/agent/agent-linux-amd64 release/agent/
          cp binaries/agent/agent-linux-arm64 release/agent/
          cp binaries/agent/agent-macos-amd64 release/agent/
          cp binaries/agent/agent-macos-arm64 release/agent/

          # Copy updater binaries with organized structure
          cp binaries/updater/updater-windows-amd64.exe release/updater/
          cp binaries/updater/updater-linux-amd64 release/updater/
          cp binaries/updater/updater-linux-arm64 release/updater/
          cp binaries/updater/updater-macos-arm64 release/updater/
          cp binaries/updater/updater-macos-amd64 release/updater/

          # Copy manager installers linux
          cp installers/install_manager_linux.sh release/installer/
          cp installers/uninstall_manager_linux.sh release/installer/

          # Copy manager installers macos
          cp installers/install_manager_macos.sh release/installer/
          cp installers/uninstall_manager_macos.sh release/installer/

          # Copy agent installers linux
          cp installers/install_agent_linux.sh release/installer/
          cp installers/uninstall_agent_linux.sh release/installer/

          # Copy agent installers macos
          cp installers/install_agent_macos.sh release/installer/
          cp installers/uninstall_agent_macos.sh release/installer/

          # Copy updater installers linux
          cp installers/install_updater_linux.sh release/installer/
          cp installers/uninstall_updater_linux.sh release/installer/

          # Copy updater installers macos
          cp installers/install_updater_macos.sh release/installer/
          cp installers/uninstall_updater_macos.sh release/installer/

          # Copy Windows installers
          cp windows-installers/*.msi release/installer/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release/manager/manager-windows-amd64.exe
            release/manager/manager-linux-amd64
            release/manager/manager-linux-arm64
            release/manager/manager-macos-amd64
            release/manager/manager-macos-arm64
            release/agent/agent-windows-amd64.exe
            release/agent/agent-linux-amd64
            release/agent/agent-linux-arm64
            release/agent/agent-macos-amd64
            release/agent/agent-macos-arm64
            release/updater/updater-windows-amd64.exe
            release/updater/updater-linux-amd64
            release/updater/updater-linux-arm64
            release/updater/updater-macos-amd64
            release/updater/updater-macos-arm64
            release/installer/install_manager_linux.sh
            release/installer/uninstall_manager_linux.sh
            release/installer/install_manager_macos.sh
            release/installer/uninstall_manager_macos.sh
            release/installer/install_agent_linux.sh
            release/installer/uninstall_agent_linux.sh
            release/installer/install_agent_macos.sh
            release/installer/uninstall_agent_macos.sh
            release/installer/install_updater_linux.sh
            release/installer/uninstall_updater_linux.sh
            release/installer/install_updater_macos.sh
            release/installer/uninstall_updater_macos.sh
            release/installer/install_manager_windows.msi
            release/installer/install_agent_windows.msi
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
    
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.SERVICES_AWS_REGION }}
      
      - name: Download e Extrair Bucket S3 do tfstate
        run: |
          aws s3 cp ${{ env.TFSTATE_S3_PATH }} resources_publics.tfstate
          echo "Verificando estrutura do tfstate..."
          jq '.outputs.bucket_ids' resources_publics.tfstate
          echo "Extraindo valor do docp-agent..."
          docp_agent=$(jq -r '.outputs.public_bucket_ids.value."docp-agent"' resources_publics.tfstate)
          echo "Valor extraído: $docp_agent"
          echo "docp_agent=$docp_agent" >> $GITHUB_ENV
      
      - name: Gerar/Atualizar index_os_instance.json com versões
        run: |
          echo "=== GERANDO/ATUALIZANDO index_os_instance.json ==="
          RELEASE_TAG="${{ github.ref_name }}"
          
          # Tentar baixar index_os_instance.json existente do bucket
          if aws s3 cp s3://${{ env.docp_agent}}/index_os_instance.json ./index_os_instance.json 2>/dev/null; then
            echo "index_os_instance.json encontrado no bucket, fazendo backup e atualizando..."
            cp index_os_instance.json index_os_instance.json.backup
            
            # Extrair versões existentes e adicionar a nova se não existir
            EXISTING_VERSIONS=$(jq -r '.versions[]' index_os_instance.json | sort -V)
            echo "Versões existentes: $EXISTING_VERSIONS"
            
            # Criar array com todas as versões (existentes + nova se não existir)
            ALL_VERSIONS=$(echo "$EXISTING_VERSIONS" | grep -v "^$RELEASE_TAG$" || true)
            if [ -n "$ALL_VERSIONS" ]; then
              ALL_VERSIONS="$ALL_VERSIONS"$'\n'"$RELEASE_TAG"
            else
              ALL_VERSIONS="$RELEASE_TAG"
            fi
            
            # Ordenar versões
            SORTED_VERSIONS=$(echo "$ALL_VERSIONS" | sort -V)
            
            # Criar novo index_os_instance.json
            echo "{" > index_os_instance.json
            echo "  \"latest\": \"$RELEASE_TAG\"," >> index_os_instance.json
            echo "  \"versions\": [" >> index_os_instance.json
            
            # Adicionar versões ao array JSON
            FIRST=true
            for version in $SORTED_VERSIONS; do
              if [ "$FIRST" = true ]; then
                echo "    \"$version\"" >> index_os_instance.json
                FIRST=false
              else
                echo "    ,\"$version\"" >> index_os_instance.json
              fi
            done
            
            echo "  ]" >> index_os_instance.json
            echo "}" >> index_os_instance.json
          else
            echo "index_os_instance.json não encontrado no bucket, criando novo..."
            cat > index_os_instance.json << EOF
          {
            "latest": "$RELEASE_TAG",
            "versions": [
              "$RELEASE_TAG"
            ]
          }
          EOF
          fi
          
          echo "=== CONTEÚDO DO index_os_instance.json ==="
          cat index_os_instance.json
          
          echo "=== VALIDANDO JSON ==="
          if jq . index_os_instance.json > /dev/null 2>&1; then
            echo "JSON válido!"
          else
            echo "ERRO: JSON inválido!"
            exit 1
          fi
          
          echo "=== FAZENDO UPLOAD DO index_os_instance.json ==="
          aws s3 cp index_os_instance.json s3://${{ env.docp_agent}}/
          
          echo "Upload do index_os_instance.json concluído!"
          echo "Verificando arquivo no bucket:"
          aws s3 ls s3://${{ env.docp_agent}}/index_os_instance.json

